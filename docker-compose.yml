services:

  backend:
    build: backend
    container_name: backend
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://backend/system/ping || exit 1" ]
      interval: 10s
      retries: 5
      start_period: 5s
      timeout: 5s

  frontend:
    build: frontend
    container_name: frontend
    restart: unless-stopped
    expose:
      - 80

  db:
    image: postgres:alpine
    container_name: db
    command: -c 'max_connections=1000'
    volumes:
      - pgdata:/var/lib/postgresql/data/
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME}" ]
      interval: 10s
      retries: 5
      start_period: 5s
      timeout: 10s
    restart: unless-stopped

  minio:
    image: minio/minio
    container_name: minio
    expose:
      - 9000
    env_file:
      - .env
    environment:
      MINIO_ROOT_USER: ${AWS_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${AWS_SECRET_ACCESS_KEY}
    command: server /data
    volumes:
      - minio_data:/data
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:9000/minio/health/live" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 5s
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: unless-stopped
    ports:
      - "127.0.0.1:8001:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_started

volumes:
  pgdata:
  minio_data: